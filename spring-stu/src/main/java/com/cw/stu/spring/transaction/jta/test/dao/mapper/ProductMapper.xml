<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cw.stu.spring.transaction.jta.test.dao.persistence.ProductMapper">
  <resultMap id="BaseResultMap" type="com.cw.stu.spring.transaction.jta.test.dao.domain.Product">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="product_name" jdbcType="VARCHAR" property="productName" />
    <result column="product_content" jdbcType="VARCHAR" property="productContent" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="false_sales" jdbcType="INTEGER" property="falseSales" />
    <result column="category_id" jdbcType="BIGINT" property="categoryId" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <if test="oredCriteria != null">
        <foreach collection="oredCriteria" item="criteria" separator="or">
          <if test="criteria.valid">
            <trim prefix="(" prefixOverrides="and" suffix=")">
              <foreach collection="criteria.criteria" item="criterion">
                <choose>
                  <when test="criterion.noValue">
                    and ${criterion.condition}
                  </when>
                  <when test="criterion.singleValue">
                    and ${criterion.condition} #{criterion.value}
                  </when>
                  <when test="criterion.betweenValue">
                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                  </when>
                  <when test="criterion.listValue">
                    and ${criterion.condition}
                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                    </foreach>
                  </when>
                </choose>
              </foreach>
            </trim>
          </if>
        </foreach>
      </if>
      <if test="id != null and id != ''">
         and id = #{id,jdbcType=BIGINT}
      </if>
      <if test="productName != null and productName != ''">
         and product_name = #{productName,jdbcType=VARCHAR}
      </if>
      <if test="productNameRange != null and productNameRange != ''">
         and product_name like concat('%',#{productNameRange},'%')
      </if>
      <if test="productContent != null and productContent != ''">
         and product_content = #{productContent,jdbcType=VARCHAR}
      </if>
      <if test="productContentRange != null and productContentRange != ''">
         and product_content like concat('%',#{productContentRange},'%')
      </if>
      <if test="price != null and price != ''">
         and price = #{price,jdbcType=DECIMAL}
      </if>
      <if test="sort != null and sort != ''">
         and sort = #{sort,jdbcType=INTEGER}
      </if>
      <if test="falseSales != null and falseSales != ''">
         and false_sales = #{falseSales,jdbcType=INTEGER}
      </if>
      <if test="categoryId != null and categoryId != ''">
         and category_id = #{categoryId,jdbcType=BIGINT}
      </if>
      <if test="type != null and type != ''">
         and type = #{type,jdbcType=INTEGER}
      </if>
      <if test="state != null and state != ''">
         and state = #{state,jdbcType=INTEGER}
      </if>
      <if test="extracClause != null and extracClause != ''">
         and  ${extracClause} 
      </if>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <if test="example.oredCriteria != null">
        <foreach collection="example.oredCriteria" item="criteria" separator="or">
          <if test="criteria.valid">
            <trim prefix="(" prefixOverrides="and" suffix=")">
              <foreach collection="criteria.criteria" item="criterion">
                <choose>
                  <when test="criterion.noValue">
                    and ${criterion.condition}
                  </when>
                  <when test="criterion.singleValue">
                    and ${criterion.condition} #{criterion.value}
                  </when>
                  <when test="criterion.betweenValue">
                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                  </when>
                  <when test="criterion.listValue">
                    and ${criterion.condition}
                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                    </foreach>
                  </when>
                </choose>
              </foreach>
            </trim>
          </if>
        </foreach>
      </if>
      <if test="example.id != null and example.id != ''">
         and id = #{example.id,jdbcType=BIGINT}
      </if>
      <if test="example.productName != null and example.productName != ''">
         and product_name = #{example.productName,jdbcType=VARCHAR}
      </if>
      <if test="example.productNameRange != null and example.productNameRange != ''">
         and product_name like concat('%',#{example.productNameRange},'%')
      </if>
      <if test="example.productContent != null and example.productContent != ''">
         and product_content = #{example.productContent,jdbcType=VARCHAR}
      </if>
      <if test="example.productContentRange != null and example.productContentRange != ''">
         and product_content like concat('%',#{example.productContentRange},'%')
      </if>
      <if test="example.price != null and example.price != ''">
         and price = #{example.price,jdbcType=DECIMAL}
      </if>
      <if test="example.sort != null and example.sort != ''">
         and sort = #{example.sort,jdbcType=INTEGER}
      </if>
      <if test="example.falseSales != null and example.falseSales != ''">
         and false_sales = #{example.falseSales,jdbcType=INTEGER}
      </if>
      <if test="example.categoryId != null and example.categoryId != ''">
         and category_id = #{example.categoryId,jdbcType=BIGINT}
      </if>
      <if test="example.type != null and example.type != ''">
         and type = #{example.type,jdbcType=INTEGER}
      </if>
      <if test="example.state != null and example.state != ''">
         and state = #{example.state,jdbcType=INTEGER}
      </if>
      <if test="example.extracClause != null and example.extracClause != ''">
         and  ${example.extracClause} 
      </if>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, product_name, product_content, price, sort, false_sales, category_id, type, state
  </sql>
  <select id="selectByExample" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.ProductCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from product
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from product
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from product
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.ProductCriteria">
    delete from product
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.Product">
    insert into product (id, product_name, product_content, 
      price, sort, false_sales, 
      category_id, type, state
      )
    values (#{id,jdbcType=BIGINT}, #{productName,jdbcType=VARCHAR}, #{productContent,jdbcType=VARCHAR}, 
      #{price,jdbcType=DECIMAL}, #{sort,jdbcType=INTEGER}, #{falseSales,jdbcType=INTEGER}, 
      #{categoryId,jdbcType=BIGINT}, #{type,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.Product">
    insert into product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="productName != null">
        product_name,
      </if>
      <if test="productContent != null">
        product_content,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="falseSales != null">
        false_sales,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="productName != null">
        #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productContent != null">
        #{productContent,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="falseSales != null">
        #{falseSales,jdbcType=INTEGER},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.ProductCriteria" resultType="java.lang.Long">
    select count(*) from product
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update product
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.productName != null">
        product_name = #{record.productName,jdbcType=VARCHAR},
      </if>
      <if test="record.productContent != null">
        product_content = #{record.productContent,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.falseSales != null">
        false_sales = #{record.falseSales,jdbcType=INTEGER},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=BIGINT},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update product
    set id = #{record.id,jdbcType=BIGINT},
      product_name = #{record.productName,jdbcType=VARCHAR},
      product_content = #{record.productContent,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DECIMAL},
      sort = #{record.sort,jdbcType=INTEGER},
      false_sales = #{record.falseSales,jdbcType=INTEGER},
      category_id = #{record.categoryId,jdbcType=BIGINT},
      type = #{record.type,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.Product">
    update product
    <set>
      <if test="productName != null">
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productContent != null">
        product_content = #{productContent,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="falseSales != null">
        false_sales = #{falseSales,jdbcType=INTEGER},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.Product">
    update product
    set product_name = #{productName,jdbcType=VARCHAR},
      product_content = #{productContent,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      sort = #{sort,jdbcType=INTEGER},
      false_sales = #{falseSales,jdbcType=INTEGER},
      category_id = #{categoryId,jdbcType=BIGINT},
      type = #{type,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="insertListSelective" parameterType="map">
    insert into product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="record.id != null">
        id,
      </if>
      <if test="record.productName != null">
        product_name,
      </if>
      <if test="record.productContent != null">
        product_content,
      </if>
      <if test="record.price != null">
        price,
      </if>
      <if test="record.sort != null">
        sort,
      </if>
      <if test="record.falseSales != null">
        false_sales,
      </if>
      <if test="record.categoryId != null">
        category_id,
      </if>
      <if test="record.type != null">
        type,
      </if>
      <if test="record.state != null">
        state,
      </if>
    </trim>
    <foreach close=" " collection="records" item="listItem" open="values " separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <if test="record.id != null">
          #{listItem.id,jdbcType=BIGINT},
        </if>
        <if test="record.productName != null">
          #{listItem.productName,jdbcType=VARCHAR},
        </if>
        <if test="record.productContent != null">
          #{listItem.productContent,jdbcType=VARCHAR},
        </if>
        <if test="record.price != null">
          #{listItem.price,jdbcType=DECIMAL},
        </if>
        <if test="record.sort != null">
          #{listItem.sort,jdbcType=INTEGER},
        </if>
        <if test="record.falseSales != null">
          #{listItem.falseSales,jdbcType=INTEGER},
        </if>
        <if test="record.categoryId != null">
          #{listItem.categoryId,jdbcType=BIGINT},
        </if>
        <if test="record.type != null">
          #{listItem.type,jdbcType=INTEGER},
        </if>
        <if test="record.state != null">
          #{listItem.state,jdbcType=INTEGER},
        </if>
      </trim>
    </foreach>
  </insert>
  <insert id="replaceListSelective" parameterType="map">
    replace into product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="record.id != null">
        id,
      </if>
      <if test="record.productName != null">
        product_name,
      </if>
      <if test="record.productContent != null">
        product_content,
      </if>
      <if test="record.price != null">
        price,
      </if>
      <if test="record.sort != null">
        sort,
      </if>
      <if test="record.falseSales != null">
        false_sales,
      </if>
      <if test="record.categoryId != null">
        category_id,
      </if>
      <if test="record.type != null">
        type,
      </if>
      <if test="record.state != null">
        state,
      </if>
    </trim>
    <foreach close=" " collection="records" item="listItem" open="values " separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <if test="record.id != null">
          #{listItem.id,jdbcType=BIGINT},
        </if>
        <if test="record.productName != null">
          #{listItem.productName,jdbcType=VARCHAR},
        </if>
        <if test="record.productContent != null">
          #{listItem.productContent,jdbcType=VARCHAR},
        </if>
        <if test="record.price != null">
          #{listItem.price,jdbcType=DECIMAL},
        </if>
        <if test="record.sort != null">
          #{listItem.sort,jdbcType=INTEGER},
        </if>
        <if test="record.falseSales != null">
          #{listItem.falseSales,jdbcType=INTEGER},
        </if>
        <if test="record.categoryId != null">
          #{listItem.categoryId,jdbcType=BIGINT},
        </if>
        <if test="record.type != null">
          #{listItem.type,jdbcType=INTEGER},
        </if>
        <if test="record.state != null">
          #{listItem.state,jdbcType=INTEGER},
        </if>
      </trim>
    </foreach>
  </insert>
  <insert id="replaceSelective" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.Product">
    replace into product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="productName != null">
        product_name,
      </if>
      <if test="productContent != null">
        product_content,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="falseSales != null">
        false_sales,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="productName != null">
        #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productContent != null">
        #{productContent,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="falseSales != null">
        #{falseSales,jdbcType=INTEGER},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <insert id="insertOnDuplicateKeySelective" parameterType="com.cw.stu.spring.transaction.jta.test.dao.domain.Product">
    insert into product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="productName != null">
        product_name,
      </if>
      <if test="productContent != null">
        product_content,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="falseSales != null">
        false_sales,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="productName != null">
        #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productContent != null">
        #{productContent,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="falseSales != null">
        #{falseSales,jdbcType=INTEGER},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
     on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id=values(id),
      </if>
      <if test="productName != null">
        product_name=values(product_name),
      </if>
      <if test="productContent != null">
        product_content=values(product_content),
      </if>
      <if test="price != null">
        price=values(price),
      </if>
      <if test="sort != null">
        sort=values(sort),
      </if>
      <if test="falseSales != null">
        false_sales=values(false_sales),
      </if>
      <if test="categoryId != null">
        category_id=values(category_id),
      </if>
      <if test="type != null">
        type=values(type),
      </if>
      <if test="state != null">
        state=values(state),
      </if>
    </trim>
  </insert>
  <insert id="insertListOnDuplicateKeySelective" parameterType="map">
    insert into product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="record.id != null">
        id,
      </if>
      <if test="record.productName != null">
        product_name,
      </if>
      <if test="record.productContent != null">
        product_content,
      </if>
      <if test="record.price != null">
        price,
      </if>
      <if test="record.sort != null">
        sort,
      </if>
      <if test="record.falseSales != null">
        false_sales,
      </if>
      <if test="record.categoryId != null">
        category_id,
      </if>
      <if test="record.type != null">
        type,
      </if>
      <if test="record.state != null">
        state,
      </if>
    </trim>
    <foreach close=" " collection="records" item="listItem" open="values " separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <if test="record.id != null">
          #{listItem.id,jdbcType=BIGINT},
        </if>
        <if test="record.productName != null">
          #{listItem.productName,jdbcType=VARCHAR},
        </if>
        <if test="record.productContent != null">
          #{listItem.productContent,jdbcType=VARCHAR},
        </if>
        <if test="record.price != null">
          #{listItem.price,jdbcType=DECIMAL},
        </if>
        <if test="record.sort != null">
          #{listItem.sort,jdbcType=INTEGER},
        </if>
        <if test="record.falseSales != null">
          #{listItem.falseSales,jdbcType=INTEGER},
        </if>
        <if test="record.categoryId != null">
          #{listItem.categoryId,jdbcType=BIGINT},
        </if>
        <if test="record.type != null">
          #{listItem.type,jdbcType=INTEGER},
        </if>
        <if test="record.state != null">
          #{listItem.state,jdbcType=INTEGER},
        </if>
      </trim>
    </foreach>
     on duplicate key update 
    <trim suffixOverrides=",">
      <if test="record.id != null">
        id=values(id),
      </if>
      <if test="record.productName != null">
        product_name=values(product_name),
      </if>
      <if test="record.productContent != null">
        product_content=values(product_content),
      </if>
      <if test="record.price != null">
        price=values(price),
      </if>
      <if test="record.sort != null">
        sort=values(sort),
      </if>
      <if test="record.falseSales != null">
        false_sales=values(false_sales),
      </if>
      <if test="record.categoryId != null">
        category_id=values(category_id),
      </if>
      <if test="record.type != null">
        type=values(type),
      </if>
      <if test="record.state != null">
        state=values(state),
      </if>
    </trim>
  </insert>
</mapper>